"""
Application FastAPI principale
"""
import os
import tempfile
import uuid
import time
from datetime import datetime
from typing import Dict, Any
from pathlib import Path

from fastapi import FastAPI, File, UploadFile, Depends, HTTPException, status, Form
from fastapi.responses import Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware

from app.config import settings
from app.logging_config import setup_logging, get_logger, log_request_info, log_conversion_info, log_error
from app.auth import get_current_user, get_user_id, JWTError
from app.models import ConversionResponse, ErrorResponse, HealthResponse, UserInfo
from app.services.msg_converter import MSGConverter, MSGConversionError

# Configuration du logging
setup_logging()
logger = get_logger(__name__)

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title=settings.api_title,
    description=settings.api_description,
    version=settings.api_version,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # √Ä configurer selon vos besoins
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware de s√©curit√©
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["*"]  # √Ä configurer selon vos besoins
)

# Instance du convertisseur
converter = MSGConverter()


@app.on_event("startup")
async def startup_event():
    """√âv√©nement de d√©marrage de l'application"""
    logger.info("üöÄ D√©marrage de l'API MSG to PDF Converter")
    logger.info(f"Version: {settings.api_version}")
    logger.info(f"JWKS URL: {settings.jwks_url}")
    
    # V√©rification de la connectivit√© JWKS au d√©marrage
    try:
        from app.auth import get_jwks
        get_jwks()
        logger.info("‚úÖ Connexion JWKS v√©rifi√©e")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Probl√®me de connexion JWKS: {e}")


@app.on_event("shutdown")
async def shutdown_event():
    """√âv√©nement d'arr√™t de l'application"""
    logger.info("üõë Arr√™t de l'API MSG to PDF Converter")


@app.get("/health", response_model=HealthResponse, tags=["Health"])
async def health_check():
    """Point de contr√¥le de sant√© de l'API"""
    jwks_status = "ok"
    try:
        from app.auth import get_jwks
        get_jwks()
    except Exception:
        jwks_status = "error"
    
    return HealthResponse(
        status="healthy",
        version=settings.api_version,
        jwks_status=jwks_status
    )


@app.get("/user/info", response_model=UserInfo, tags=["User"])
async def get_user_info(current_user: Dict[str, Any] = Depends(get_current_user)):
    """R√©cup√®re les informations de l'utilisateur connect√©"""
    from app.auth import get_user_email, get_user_roles
    
    return UserInfo(
        user_id=get_user_id(current_user),
        email=get_user_email(current_user),
        roles=get_user_roles(current_user),
        token_exp=datetime.fromtimestamp(current_user.get("exp", 0)) if current_user.get("exp") else None
    )


@app.post("/convert", response_model=ConversionResponse, tags=["Conversion"])
async def convert_msg_to_pdf(
    file: UploadFile = File(..., description="Fichier .msg √† convertir"),
    merge_attachments: bool = Form(default=True, description="Fusionner les PDFs en pi√®ces jointes"),
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    Convertit un fichier .msg Outlook en PDF
    
    - **file**: Fichier .msg √† convertir (obligatoire)
    - **merge_attachments**: Si True, fusionne les PDFs en pi√®ces jointes avec le mail converti
    
    Retourne le PDF converti avec les m√©tadonn√©es de conversion.
    """
    request_id = str(uuid.uuid4())
    user_id = get_user_id(current_user)
    start_time = time.time()
    
    log_request_info(request_id, "/convert", "POST", user_id)
    
    # Validation du fichier
    if not file.filename:
        error_msg = "Nom de fichier manquant"
        log_error(request_id, ValueError(error_msg))
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=error_msg
        )
    
    if not file.filename.lower().endswith('.msg'):
        error_msg = f"Type de fichier non support√©: {file.filename}. Seuls les fichiers .msg sont accept√©s."
        log_error(request_id, ValueError(error_msg))
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=error_msg
        )
    
    # V√©rification de la taille du fichier
    file_content = await file.read()
    file_size = len(file_content)
    
    if file_size > settings.max_file_size:
        error_msg = f"Fichier trop volumineux: {file_size} bytes. Limite: {settings.max_file_size} bytes"
        log_error(request_id, ValueError(error_msg))
        raise HTTPException(
            status_code=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE,
            detail=error_msg
        )
    
    temp_file_path = None
    try:
        # Sauvegarde temporaire du fichier
        with tempfile.NamedTemporaryFile(delete=False, suffix='.msg') as temp_file:
            temp_file.write(file_content)
            temp_file_path = temp_file.name
        
        logger.info(f"[{request_id}] Fichier temporaire cr√©√©: {temp_file_path}")
        
        # Conversion
        main_pdf, attachment_pdfs = converter.convert_msg_to_pdf(temp_file_path, request_id)
        
        logger.info(f"[{request_id}] üìß PDF principal cr√©√©: {len(main_pdf)} bytes")
        logger.info(f"[{request_id}] üìé Pi√®ces jointes PDF trouv√©es: {len(attachment_pdfs)}")
        
        # Fusion si demand√©e
        if merge_attachments:
            if attachment_pdfs:
                logger.info(f"[{request_id}] üîÑ Fusion de {len(attachment_pdfs)} PDF(s) avec le mail principal...")
                final_pdf = converter.merge_pdfs(main_pdf, attachment_pdfs, request_id)
                attachments_count = len(attachment_pdfs)
                logger.info(f"[{request_id}] ‚úÖ Fusion termin√©e: {len(final_pdf)} bytes au total")
            else:
                logger.info(f"[{request_id}] ‚ùå Aucune pi√®ce jointe PDF √† fusionner")
                final_pdf = main_pdf
                attachments_count = 0
        else:
            logger.info(f"[{request_id}] ‚è≠Ô∏è Fusion d√©sactiv√©e par l'utilisateur")
            final_pdf = main_pdf
            attachments_count = 0
        
        processing_time = time.time() - start_time
        output_filename = f"{Path(file.filename).stem}.pdf"
        
        # Logging de la conversion
        log_conversion_info(request_id, file.filename, file_size, processing_time)
        
        # Pr√©paration de la r√©ponse
        response_data = ConversionResponse(
            request_id=request_id,
            filename=file.filename,
            output_filename=output_filename,
            file_size=file_size,
            output_size=len(final_pdf),
            processing_time=processing_time,
            attachments_processed=attachments_count,
            created_at=datetime.utcnow()
        )
        
        logger.info(f"[{request_id}] Conversion r√©ussie - Taille finale: {len(final_pdf)} bytes")
        
        # Retour du PDF avec les m√©tadonn√©es dans les headers
        return Response(
            content=final_pdf,
            media_type="application/pdf",
            headers={
                "Content-Disposition": f"attachment; filename={output_filename}",
                "X-Request-ID": request_id,
                "X-Processing-Time": str(processing_time),
                "X-Attachments-Processed": str(attachments_count),
                "X-Original-Size": str(file_size),
                "X-Output-Size": str(len(final_pdf))
            }
        )
        
    except MSGConversionError as e:
        log_error(request_id, e, {"filename": file.filename, "file_size": file_size})
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail=f"Erreur de conversion: {str(e)}"
        )
    except Exception as e:
        log_error(request_id, e, {"filename": file.filename, "file_size": file_size})
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur interne du serveur"
        )
    finally:
        # Nettoyage du fichier temporaire
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
                logger.debug(f"[{request_id}] Fichier temporaire supprim√©: {temp_file_path}")
            except Exception as e:
                logger.warning(f"[{request_id}] Impossible de supprimer le fichier temporaire: {e}")


@app.exception_handler(JWTError)
async def jwt_exception_handler(request, exc: JWTError):
    """Gestionnaire d'exception pour les erreurs JWT"""
    return HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail=str(exc),
        headers={"WWW-Authenticate": "Bearer"},
    )


@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc: HTTPException):
    """Gestionnaire d'exception HTTP personnalis√©"""
    request_id = str(uuid.uuid4())
    
    logger.warning(f"[{request_id}] HTTP Exception: {exc.status_code} - {exc.detail}")
    
    # Retourner le format standard FastAPI pour les tests
    from fastapi.responses import JSONResponse
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail},
        headers={"X-Request-ID": request_id}
    )


@app.exception_handler(Exception)
async def general_exception_handler(request, exc: Exception):
    """Gestionnaire d'exception g√©n√©ral"""
    request_id = str(uuid.uuid4())
    
    log_error(request_id, exc)
    
    # Retourner le format standard FastAPI pour les tests
    from fastapi.responses import JSONResponse
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={"detail": "Erreur interne du serveur"},
        headers={"X-Request-ID": request_id}
    )


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level=settings.log_level.lower()
    )