#!/usr/bin/env python3
"""
Script de debug pour la fusion des pi√®ces jointes
"""
import sys
import os
from io import BytesIO
import traceback

# Ajouter le r√©pertoire parent au path pour importer les modules de l'app
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))

def debug_attachment_fusion():
    """Debug sp√©cifique de la fusion des pi√®ces jointes"""
    print("üîó Debug de la fusion des pi√®ces jointes...")
    print("=" * 60)
    
    try:
        from app.services.msg_converter import MSGConverter
        import extract_msg
        from PyPDF2 import PdfReader
        
        # Ouvrir le fichier CV.msg
        cv_path = "CV.msg"
        msg = extract_msg.Message(cv_path)
        converter = MSGConverter()
        
        print(f"üìÅ Fichier: {cv_path}")
        print(f"üìé Pi√®ces jointes: {len(msg.attachments)}")
        
        # √âtape 1: Cr√©er le PDF principal
        print("\nüîç √âtape 1: Cr√©ation du PDF principal...")
        main_pdf = converter._create_main_pdf(msg, "debug-fusion")
        print(f"‚úÖ PDF principal: {len(main_pdf)} bytes")
        
        # √âtape 2: Analyser les pi√®ces jointes
        print("\nüîç √âtape 2: Analyse des pi√®ces jointes...")
        for i, attachment in enumerate(msg.attachments):
            filename = attachment.longFilename or attachment.shortFilename or f"attachment_{i}"
            size = len(attachment.data) if attachment.data else 0
            print(f"  Pi√®ce jointe {i+1}: {filename} ({size} bytes)")
            
            # Test si c'est un PDF valide
            if filename.lower().endswith('.pdf'):
                try:
                    pdf_reader = PdfReader(BytesIO(attachment.data))
                    print(f"    ‚úÖ PDF valide avec {len(pdf_reader.pages)} page(s)")
                except Exception as e:
                    print(f"    ‚ùå PDF invalide: {e}")
            elif filename.lower().endswith('.docx'):
                print(f"    ‚ö†Ô∏è DOCX non support√© (sera ignor√©)")
            else:
                print(f"    ‚ùì Type non reconnu")
        
        # √âtape 3: Test du traitement des pi√®ces jointes
        print("\nüîç √âtape 3: Traitement des pi√®ces jointes...")
        try:
            attachment_pdfs = converter._process_attachments(msg, "debug-fusion", False)
            print(f"‚úÖ Pi√®ces jointes trait√©es: {len(attachment_pdfs)} PDFs pr√™ts")
            
            for i, pdf_data in enumerate(attachment_pdfs):
                print(f"  PDF {i+1}: {len(pdf_data)} bytes")
                
                # V√©rifier la validit√© de chaque PDF
                try:
                    reader = PdfReader(BytesIO(pdf_data))
                    print(f"    ‚úÖ PDF valide avec {len(reader.pages)} page(s)")
                except Exception as e:
                    print(f"    ‚ùå PDF invalide: {e}")
                    
        except Exception as e:
            print(f"‚ùå Erreur lors du traitement des pi√®ces jointes: {e}")
            traceback.print_exc()
            return False
        
        # √âtape 4: Test de fusion sans pi√®ces jointes (mode normal)
        print("\nüîç √âtape 4: Test de fusion (mode normal)...")
        try:
            if attachment_pdfs:
                print(f"Fusion de {len(attachment_pdfs)} PDF(s) avec le principal...")
                merged_pdf = converter.merge_pdfs(main_pdf, attachment_pdfs, "debug-fusion")
                print(f"‚úÖ PDF fusionn√©: {len(merged_pdf)} bytes")
                
                # Sauvegarder le PDF fusionn√©
                with open("debug_merged_cv.pdf", "wb") as f:
                    f.write(merged_pdf)
                print("‚úÖ PDF fusionn√© sauvegard√©: debug_merged_cv.pdf")
                
                # V√©rifier la validit√© du PDF fusionn√©
                try:
                    reader = PdfReader(BytesIO(merged_pdf))
                    print(f"‚úÖ PDF fusionn√© valide avec {len(reader.pages)} page(s)")
                    
                    # D√©tailler les pages
                    for i, page in enumerate(reader.pages):
                        print(f"    Page {i+1}: Pr√©sente")
                        
                except Exception as e:
                    print(f"‚ùå PDF fusionn√© invalide: {e}")
                    return False
            else:
                print("‚ö†Ô∏è Aucun PDF √† fusionner")
                merged_pdf = main_pdf
        
        except Exception as e:
            print(f"‚ùå Erreur lors de la fusion: {e}")
            traceback.print_exc()
            return False
        
        # √âtape 5: Test de la conversion compl√®te via l'API method
        print("\nüîç √âtape 5: Test de la conversion compl√®te...")
        try:
            full_main_pdf, full_attachment_pdfs = converter.convert_msg_to_pdf(cv_path, "debug-full")
            print(f"‚úÖ Conversion compl√®te - Principal: {len(full_main_pdf)} bytes, Attachments: {len(full_attachment_pdfs)}")
            
            if full_attachment_pdfs:
                full_merged = converter.merge_pdfs(full_main_pdf, full_attachment_pdfs, "debug-full")
                print(f"‚úÖ Fusion compl√®te: {len(full_merged)} bytes")
                
                # Sauvegarder le r√©sultat final
                with open("debug_final_cv.pdf", "wb") as f:
                    f.write(full_merged)
                print("‚úÖ PDF final sauvegard√©: debug_final_cv.pdf")
                
                # V√©rifier la validit√© finale
                try:
                    reader = PdfReader(BytesIO(full_merged))
                    print(f"‚úÖ PDF final valide avec {len(reader.pages)} page(s)")
                    
                    if len(full_merged) > 50000:  # PDF devrait √™tre volumineux avec le CV
                        print("‚úÖ Taille du PDF finale coh√©rente")
                        return True
                    else:
                        print(f"‚ö†Ô∏è PDF final plus petit qu'attendu: {len(full_merged)} bytes")
                        return False
                        
                except Exception as e:
                    print(f"‚ùå PDF final invalide: {e}")
                    return False
            else:
                print("‚ö†Ô∏è Pas de pi√®ces jointes PDF √† fusionner")
                return True
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la conversion compl√®te: {e}")
            traceback.print_exc()
            return False
        
        finally:
            try:
                msg.close()
            except:
                pass
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üîó Debug sp√©cifique de la fusion des pi√®ces jointes...")
    print("=" * 60)
    
    success = debug_attachment_fusion()
    
    print("=" * 60)
    if success:
        print("‚úÖ Debug de fusion termin√© avec succ√®s!")
        print("üí° V√©rifiez les fichiers PDF g√©n√©r√©s:")
        print("   - debug_merged_cv.pdf")
        print("   - debug_final_cv.pdf")
    else:
        print("‚ùå Probl√®me d√©tect√© lors de la fusion!")
        print("üí° Le probl√®me semble √™tre dans le processus de fusion des PDFs")